// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test Admin Order component renders correctly 1`] = `
<div
  className="order-container"
  style={
    Object {
      "justifyContent": "spaceAround",
      "marginTop": "6rem",
    }
  }
>
  <h2
    style={
      Object {
        "marginTop": "4rem",
      }
    }
  >
    Overview Of Most Ordered Meal 
  </h2>
  <div
    className="order-wrapper"
    style={
      Object {
        "marginLeft": "5%",
        "marginRight": "5%",
      }
    }
  >
    <AreaChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Object {
            "name": "rice...",
            "price": "400",
            "totalOrder": 4,
          },
        ]
      }
      height={250}
      layout="horizontal"
      margin={
        Object {
          "bottom": 0,
          "left": 0,
          "right": 30,
          "top": 10,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      width={1000}
    >
      <defs>
        <linearGradient
          id="colorUv"
          x1="0"
          x2="0"
          y1="0"
          y2="1"
        >
          <stop
            offset="5%"
            stopColor="#8884d8"
            stopOpacity={0.8}
          />
          <stop
            offset="95%"
            stopColor="#8884d8"
            stopOpacity={0}
          />
        </linearGradient>
        <linearGradient
          id="colorPv"
          x1="0"
          x2="0"
          y1="0"
          y2="1"
        >
          <stop
            offset="5%"
            stopColor="#82ca9d"
            stopOpacity={0.8}
          />
          <stop
            offset="95%"
            stopColor="#82ca9d"
            stopOpacity={0}
          />
        </linearGradient>
      </defs>
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="name"
        domain={
          Array [
            0,
            "auto",
          ]
        }
        height={30}
        hide={false}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        domain={
          Array [
            0,
            "auto",
          ]
        }
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        strokeDasharray="3 3"
        vertical={true}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <Tooltip
        active={false}
        animationDuration={400}
        animationEasing="ease"
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        isAnimationActive={true}
        itemSorter={[Function]}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        separator=" : "
        useTranslate3d={false}
        viewBox={
          Object {
            "x1": 0,
            "x2": 0,
            "y1": 0,
            "y2": 0,
          }
        }
        wrapperStyle={Object {}}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={false}
        dataKey="totalOrder"
        dot={false}
        fill="url(#colorUv)"
        fillOpacity={1}
        hide={false}
        isAnimationActive={true}
        legendType="line"
        points={Array []}
        stroke="#8884d8"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={false}
        dataKey="price"
        dot={false}
        fill="url(#colorPv)"
        fillOpacity={1}
        hide={false}
        isAnimationActive={true}
        legendType="line"
        points={Array []}
        stroke="#82ca9d"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
    </AreaChart>
  </div>
  <h2
    style={
      Object {
        "marginTop": "4rem",
      }
    }
  >
    ORDER HISTORY OF ALL USERS
  </h2>
  <div
    className="order-wrapper"
  >
    <span>
      <AccordionWrapper
        accordion={true}
        className="accordion"
        onChange={[Function]}
      >
        <AccordionItemWrapper
          accordionStore={
            AccordionContainer {
              "_listeners": Array [],
              "addItem": [Function],
              "removeItem": [Function],
              "setAccordion": [Function],
              "setExpanded": [Function],
              "setOnChange": [Function],
              "state": Object {
                "accordion": true,
                "items": Array [],
                "onChange": [Function],
              },
            }
          }
          className="accordion__item"
          disabled={false}
          expanded={false}
          hideBodyClassName=""
        >
          <AccordionItemTitleWrapper
            className="accordion__title"
            hideBodyClassName=""
          >
            <div
              className="accordion__meal"
            />
            <div
              className="order-accordion accordion-color"
            >
              <div>
                 S/N 
              </div>
              <div>
                Total price
              </div>
              <div>
                Address
              </div>
              <div>
                Date
              </div>
              <div>
                Status
              </div>
              <div>
                Username
              </div>
            </div>
          </AccordionItemTitleWrapper>
        </AccordionItemWrapper>
        <AccordionItemWrapper
          accordionStore={
            AccordionContainer {
              "_listeners": Array [],
              "addItem": [Function],
              "removeItem": [Function],
              "setAccordion": [Function],
              "setExpanded": [Function],
              "setOnChange": [Function],
              "state": Object {
                "accordion": true,
                "items": Array [],
                "onChange": [Function],
              },
            }
          }
          className="accordion__item"
          disabled={false}
          expanded={false}
          hideBodyClassName=""
          key="1"
        >
          <AccordionItemTitleWrapper
            className="accordion__title"
            hideBodyClassName=""
          >
            <div
              className="accordion__arrow u-postion-relative"
            />
            <div
              className="order-accordion"
            >
              <div
                className="order-"
              >
                1
              </div>
              <div
                className="order-contents "
              />
              <div
                className="order-contents"
              >
                Reverend Street
              </div>
              <div
                className="order-contents "
              >
                May
                 
                4
                  
                2018
              </div>
              <div
                className="order-contents"
              >
                confirmed
              </div>
              <div
                className="order-contents "
              />
            </div>
          </AccordionItemTitleWrapper>
          <AccordionItemBodyWrapper
            className="accordion__body"
            hideBodyClassName="accordion__body--hidden"
          >
            <table
              className="table"
            >
              <tbody>
                <tr
                  className="p-color tr-height tr-color"
                >
                  <th>
                    S/N
                  </th>
                  <th>
                    Name
                  </th>
                  <th>
                    Quantity
                  </th>
                  <th>
                    Price
                  </th>
                  <th>
                    Total Price
                  </th>
                </tr>
                <tr
                  className="p-color tr tr-height"
                  key="1"
                >
                  <td>
                    1
                  </td>
                  <td>
                    rice
                  </td>
                  <td>
                    3
                  </td>
                  <td>
                    200
                  </td>
                  <td>
                    4
                  </td>
                </tr>
              </tbody>
            </table>
          </AccordionItemBodyWrapper>
        </AccordionItemWrapper>
      </AccordionWrapper>
      <div
        className="meal-pagination"
      >
        <a
          activePage={1}
          firstPageText="«"
          getPageUrl={[Function]}
          hideFirstLastPages={false}
          innerClass="pagination"
          itemsCountPerPage={6}
          lastPageText="»"
          nextPageText="⟩"
          onChange={[MockFunction]}
          pageRangeDisplayed={4}
          prevPageText="⟨"
          totalItemsCount={NaN}
        />
      </div>
    </span>
  </div>
</div>
`;
