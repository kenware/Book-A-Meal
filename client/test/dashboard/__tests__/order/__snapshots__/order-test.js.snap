// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test order component of dashboard renders correctly 1`] = `
<div
  className="order-wrapper order-container"
>
  <div
    style={
      Object {
        "margin": "1rem 1rem 1rem 1rem",
      }
    }
  >
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <orderModal
        modify={[Function]}
        onChange={[Function]}
        state={
          Object {
            "activePage": 1,
            "address": "",
            "confirmButton": "Confirm",
            "confirmOrderModal": false,
            "mealName": "",
            "modifyError": "error on update",
            "modifyOrder": "Modify",
            "open": false,
            "orderId": "",
            "price": "",
            "quantity": "",
            "statusModal": "modal",
            "totalPrice": "",
          }
        }
      />
    </Modal>
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <br />
      <div
        className="modal-header"
      >
        <p
          className="justify l-r-pad-text"
        >
           Confirm that you have received this order
        </p>
      </div>
      <div
        className="modal-contents"
      >
        <button
          className="remove-modal confirmStatus"
          onClick={[Function]}
          style={
            Object {
              "float": "left",
              "minHeight": "2rem",
            }
          }
        >
          Confirm
        </button>
      </div>
    </Modal>
    <h2
      style={
        Object {
          "marginTop": "4rem",
        }
      }
    >
      MY MEAL ORDER HISTORY
    </h2>
    <h3
      className="danger text-center"
    >
      <b />
    </h3>
    <AccordionWrapper
      accordion={true}
      className="accordion"
      onChange={[Function]}
    >
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__meal"
          />
          <div
            className="order-accordion accordion-color"
          >
            <div>
               S/N 
            </div>
            <div>
              Total price
            </div>
            <div>
              Date
            </div>
            <div>
              Address
            </div>
            <div>
              Status
            </div>
            <div>
              Action
            </div>
          </div>
        </AccordionItemTitleWrapper>
      </AccordionItemWrapper>
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
        key="1"
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__arrow u-postion-relative"
          />
          <div
            className="order-accordion"
          >
            <div
              className="order-"
            >
              1
            </div>
            <div
              className="order-contents "
            >
              # 
            </div>
            <div
              className="order-contents "
            >
              May
               
              4
                
              2018
            </div>
            <div>
              Reverend Street
            </div>
            <div
              className="order-contents"
            >
              pending
            </div>
            <div>
              <button
                className="y-color confirm-btn"
                onClick={[Function]}
              >
                Confirm
              </button>
            </div>
          </div>
        </AccordionItemTitleWrapper>
        <AccordionItemBodyWrapper
          className="accordion__body"
          hideBodyClassName="accordion__body--hidden"
        >
          <table
            className="table"
          >
            <tbody>
              <tr
                className="p-color tr-height tr-color"
              >
                <th>
                  S/N
                </th>
                <th>
                  Name
                </th>
                <th>
                  Quantity
                </th>
                <th>
                  Price
                </th>
                <th>
                  Total Price
                </th>
                <th>
                  Edit
                </th>
              </tr>
              <tr
                className="p-color tr tr-height"
                key="1"
              >
                <td>
                  1
                </td>
                <td>
                  rice
                </td>
                <td>
                  3
                </td>
                <td>
                  200
                </td>
                <td />
                <td>
                  <em
                    className="modify-btn fa fa-edit fa-2x"
                    onClick={[Function]}
                    role="button"
                  />
                </td>
              </tr>
            </tbody>
          </table>
        </AccordionItemBodyWrapper>
      </AccordionItemWrapper>
    </AccordionWrapper>
    <div
      className="meal-pagination"
    >
      <a
        activePage={1}
        firstPageText="«"
        getPageUrl={[Function]}
        hideFirstLastPages={false}
        innerClass="pagination"
        itemsCountPerPage={6}
        lastPageText="»"
        nextPageText="⟩"
        onChange={[Function]}
        pageRangeDisplayed={4}
        prevPageText="⟨"
        totalItemsCount={NaN}
      />
    </div>
  </div>
</div>
`;

exports[`Test order component of dashboard should change state when component receive new props 1`] = `
<div
  className="order-wrapper order-container"
>
  <div
    style={
      Object {
        "margin": "1rem 1rem 1rem 1rem",
      }
    }
  >
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <orderModal
        modify={[Function]}
        onChange={[Function]}
        state={
          Object {
            "activePage": 1,
            "address": "",
            "confirmButton": "Confirm",
            "confirmOrderModal": false,
            "mealName": "",
            "modifyError": "",
            "modifyOrder": "Modify",
            "open": false,
            "orderId": "",
            "price": "",
            "quantity": "",
            "statusModal": "modal",
            "totalPrice": "",
          }
        }
      />
    </Modal>
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <br />
      <div
        className="modal-header"
      >
        <p
          className="justify l-r-pad-text"
        >
           Confirm that you have received this order
        </p>
      </div>
      <div
        className="modal-contents"
      >
        <button
          className="remove-modal confirmStatus"
          onClick={[Function]}
          style={
            Object {
              "float": "left",
              "minHeight": "2rem",
            }
          }
        >
          Confirm
        </button>
      </div>
    </Modal>
    <h2
      style={
        Object {
          "marginTop": "4rem",
        }
      }
    >
      MY MEAL ORDER HISTORY
    </h2>
    <h3
      className="danger text-center"
    >
      <b />
    </h3>
    <AccordionWrapper
      accordion={true}
      className="accordion"
      onChange={[Function]}
    >
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__meal"
          />
          <div
            className="order-accordion accordion-color"
          >
            <div>
               S/N 
            </div>
            <div>
              Total price
            </div>
            <div>
              Date
            </div>
            <div>
              Address
            </div>
            <div>
              Status
            </div>
            <div>
              Action
            </div>
          </div>
        </AccordionItemTitleWrapper>
      </AccordionItemWrapper>
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
        key="1"
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__arrow u-postion-relative"
          />
          <div
            className="order-accordion"
          >
            <div
              className="order-"
            >
              1
            </div>
            <div
              className="order-contents "
            >
              # 
            </div>
            <div
              className="order-contents "
            >
              May
               
              4
                
              2018
            </div>
            <div>
              Reverend Street
            </div>
            <div
              className="order-contents"
            >
              confirmed
            </div>
            <div>
              <span />
            </div>
          </div>
        </AccordionItemTitleWrapper>
        <AccordionItemBodyWrapper
          className="accordion__body"
          hideBodyClassName="accordion__body--hidden"
        >
          <table
            className="table"
          >
            <tbody>
              <tr
                className="p-color tr-height tr-color"
              >
                <th>
                  S/N
                </th>
                <th>
                  Name
                </th>
                <th>
                  Quantity
                </th>
                <th>
                  Price
                </th>
                <th>
                  Total Price
                </th>
                <th>
                  Edit
                </th>
              </tr>
              <tr
                className="p-color tr tr-height"
                key="1"
              >
                <td>
                  1
                </td>
                <td>
                  rice
                </td>
                <td>
                  3
                </td>
                <td>
                  200
                </td>
                <td />
                <td>
                  <span />
                </td>
              </tr>
            </tbody>
          </table>
        </AccordionItemBodyWrapper>
      </AccordionItemWrapper>
    </AccordionWrapper>
    <div
      className="meal-pagination"
    >
      <a
        activePage={1}
        firstPageText="«"
        getPageUrl={[Function]}
        hideFirstLastPages={false}
        innerClass="pagination"
        itemsCountPerPage={6}
        lastPageText="»"
        nextPageText="⟩"
        onChange={[Function]}
        pageRangeDisplayed={4}
        prevPageText="⟨"
        totalItemsCount={NaN}
      />
    </div>
  </div>
</div>
`;

exports[`Test order component of dashboard should change state when component receive new props 2`] = `
Orders {
  "confirmStatus": [Function],
  "context": Object {},
  "handleClick": [Function],
  "handlePageChange": [Function],
  "modify": [Function],
  "onChange": [Function],
  "onCloseModal": [Function],
  "onOpenModal": [Function],
  "props": Object {
    "actions": Object {
      "clearMessages": [MockFunction],
      "getUser": [MockFunction],
    },
    "activePage": 1,
    "cart": Object {
      "cart": [MockFunction],
    },
    "errorMessage": Object {
      "createMealError": "",
    },
    "handleMealPageChange": [MockFunction],
    "mealActions": Object {
      "createMeal": [MockFunction],
      "getAllMeals": [MockFunction],
    },
    "meals": Array [],
    "menu": Object {
      "count": 3,
      "rows": Array [],
    },
    "menuActions": Object {
      "getMenu": [MockFunction],
    },
    "menuMeals": Object {
      "count": 0,
      "meals": Array [],
    },
    "mostOrder": Array [
      Object {
        "Meal": Object {
          "descrption": "",
          "id": 1,
          "name": "",
          "price": "",
        },
        "id": "",
      },
    ],
    "myOrder": Object {
      "orders": Array [
        Object {
          "address": "Reverend Street",
          "createdAt": "2018-05-4",
          "id": 1,
          "meals": Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "orderMealItems": Object {
                "quantity": 3,
                "totalPrice": 4,
              },
              "price": "200",
            },
          ],
          "quantity": 3,
          "status": "confirmed",
          "updatedAt": "2018-05-4",
        },
      ],
    },
    "notifics": Array [
      Object {},
    ],
    "orderActions": Object {
      "getMyOrder": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "orderMeal": [MockFunction],
      "updateOrder": [MockFunction],
    },
    "successMessage": Object {
      "createMealSuccess": "",
    },
    "user": Object {},
  },
  "refs": Object {},
  "state": Object {
    "activePage": 1,
    "address": "",
    "confirmButton": "Confirm",
    "confirmOrderModal": false,
    "mealName": "",
    "modifyError": "",
    "modifyOrder": "Modify",
    "open": false,
    "orderId": "",
    "price": "",
    "quantity": "",
    "statusModal": "modal",
    "totalPrice": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <Orders
        actions={
          Object {
            "clearMessages": [MockFunction],
            "getUser": [MockFunction],
          }
        }
        activePage={1}
        cart={
          Object {
            "cart": [MockFunction],
          }
        }
        errorMessage={
          Object {
            "createMealError": "",
          }
        }
        handleMealPageChange={[MockFunction]}
        mealActions={
          Object {
            "createMeal": [MockFunction],
            "getAllMeals": [MockFunction],
          }
        }
        meals={Array []}
        menu={
          Object {
            "count": 3,
            "rows": Array [],
          }
        }
        menuActions={
          Object {
            "getMenu": [MockFunction],
          }
        }
        menuMeals={
          Object {
            "count": 0,
            "meals": Array [],
          }
        }
        mostOrder={
          Array [
            Object {
              "Meal": Object {
                "descrption": "",
                "id": 1,
                "name": "",
                "price": "",
              },
              "id": "",
            },
          ]
        }
        myOrder={
          Object {
            "orders": Array [
              Object {
                "address": "Reverend Street",
                "createdAt": "2018-05-4",
                "id": 1,
                "meals": Array [
                  Object {
                    "descrption": "Very delicious",
                    "id": 1,
                    "name": "rice",
                    "orderMealItems": Object {
                      "quantity": 3,
                      "totalPrice": 4,
                    },
                    "price": "200",
                  },
                ],
                "quantity": 3,
                "status": "confirmed",
                "updatedAt": "2018-05-4",
              },
            ],
          }
        }
        notifics={
          Array [
            Object {},
          ]
        }
        orderActions={
          Object {
            "getMyOrder": [MockFunction] {
              "calls": Array [
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "orderMeal": [MockFunction],
            "updateOrder": [MockFunction],
          }
        }
        successMessage={
          Object {
            "createMealSuccess": "",
          }
        }
        user={Object {}}
      />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": null,
      "_rendered": <div
        className="order-wrapper order-container"
      >
        <div
          style={
            Object {
              "margin": "1rem 1rem 1rem 1rem",
            }
          }
        >
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <orderModal
              modify={[Function]}
              onChange={[Function]}
              state={
                Object {
                  "activePage": 1,
                  "address": "",
                  "confirmButton": "Confirm",
                  "confirmOrderModal": false,
                  "mealName": "",
                  "modifyError": "",
                  "modifyOrder": "Modify",
                  "open": false,
                  "orderId": "",
                  "price": "",
                  "quantity": "",
                  "statusModal": "modal",
                  "totalPrice": "",
                }
              }
            />
          </Modal>
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <br />
            <div
              className="modal-header"
            >
              <p
                className="justify l-r-pad-text"
              >
                 Confirm that you have received this order
              </p>
            </div>
            <div
              className="modal-contents"
            >
              <button
                className="remove-modal confirmStatus"
                onClick={[Function]}
                style={
                  Object {
                    "float": "left",
                    "minHeight": "2rem",
                  }
                }
              >
                Confirm
              </button>
            </div>
          </Modal>
          <h2
            style={
              Object {
                "marginTop": "4rem",
              }
            }
          >
            MY MEAL ORDER HISTORY
          </h2>
          <h3
            className="danger text-center"
          >
            <b />
          </h3>
          <AccordionWrapper
            accordion={true}
            className="accordion"
            onChange={[Function]}
          >
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__meal"
                />
                <div
                  className="order-accordion accordion-color"
                >
                  <div>
                     S/N 
                  </div>
                  <div>
                    Total price
                  </div>
                  <div>
                    Date
                  </div>
                  <div>
                    Address
                  </div>
                  <div>
                    Status
                  </div>
                  <div>
                    Action
                  </div>
                </div>
              </AccordionItemTitleWrapper>
            </AccordionItemWrapper>
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__arrow u-postion-relative"
                />
                <div
                  className="order-accordion"
                >
                  <div
                    className="order-"
                  >
                    1
                  </div>
                  <div
                    className="order-contents "
                  >
                    # 
                  </div>
                  <div
                    className="order-contents "
                  >
                    May
                     
                    4
                      
                    2018
                  </div>
                  <div>
                    Reverend Street
                  </div>
                  <div
                    className="order-contents"
                  >
                    confirmed
                  </div>
                  <div>
                    <span />
                  </div>
                </div>
              </AccordionItemTitleWrapper>
              <AccordionItemBodyWrapper
                className="accordion__body"
                hideBodyClassName="accordion__body--hidden"
              >
                <table
                  className="table"
                >
                  <tbody>
                    <tr
                      className="p-color tr-height tr-color"
                    >
                      <th>
                        S/N
                      </th>
                      <th>
                        Name
                      </th>
                      <th>
                        Quantity
                      </th>
                      <th>
                        Price
                      </th>
                      <th>
                        Total Price
                      </th>
                      <th>
                        Edit
                      </th>
                    </tr>
                    <tr
                      className="p-color tr tr-height"
                    >
                      <td>
                        1
                      </td>
                      <td>
                        rice
                      </td>
                      <td>
                        3
                      </td>
                      <td>
                        200
                      </td>
                      <td />
                      <td>
                        <span />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </AccordionItemBodyWrapper>
            </AccordionItemWrapper>
          </AccordionWrapper>
          <div
            className="meal-pagination"
          >
            <a
              activePage={1}
              firstPageText="«"
              getPageUrl={[Function]}
              hideFirstLastPages={false}
              innerClass="pagination"
              itemsCountPerPage={6}
              lastPageText="»"
              nextPageText="⟩"
              onChange={[Function]}
              pageRangeDisplayed={4}
              prevPageText="⟨"
              totalItemsCount={NaN}
            />
          </div>
        </div>
      </div>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;

exports[`Test order component of dashboard should change state when component receive new props 3`] = `
<div
  className="order-wrapper order-container"
>
  <div
    style={
      Object {
        "margin": "1rem 1rem 1rem 1rem",
      }
    }
  >
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <orderModal
        modify={[Function]}
        onChange={[Function]}
        state={
          Object {
            "activePage": 1,
            "address": "",
            "confirmButton": "Confirm",
            "confirmOrderModal": false,
            "mealName": "",
            "modifyError": "",
            "modifyOrder": "Modify",
            "open": false,
            "orderId": "",
            "price": "",
            "quantity": "",
            "statusModal": "modal",
            "totalPrice": "",
          }
        }
      />
    </Modal>
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <br />
      <div
        className="modal-header"
      >
        <p
          className="justify l-r-pad-text"
        >
           Confirm that you have received this order
        </p>
      </div>
      <div
        className="modal-contents"
      >
        <button
          className="remove-modal confirmStatus"
          onClick={[Function]}
          style={
            Object {
              "float": "left",
              "minHeight": "2rem",
            }
          }
        >
          Confirm
        </button>
      </div>
    </Modal>
    <h2
      style={
        Object {
          "marginTop": "4rem",
        }
      }
    >
      MY MEAL ORDER HISTORY
    </h2>
    <h3
      className="danger text-center"
    >
      <b />
    </h3>
    <AccordionWrapper
      accordion={true}
      className="accordion"
      onChange={[Function]}
    >
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__meal"
          />
          <div
            className="order-accordion accordion-color"
          >
            <div>
               S/N 
            </div>
            <div>
              Total price
            </div>
            <div>
              Date
            </div>
            <div>
              Address
            </div>
            <div>
              Status
            </div>
            <div>
              Action
            </div>
          </div>
        </AccordionItemTitleWrapper>
      </AccordionItemWrapper>
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
        key="1"
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__arrow u-postion-relative"
          />
          <div
            className="order-accordion"
          >
            <div
              className="order-"
            >
              1
            </div>
            <div
              className="order-contents "
            >
              # 
            </div>
            <div
              className="order-contents "
            >
              May
               
              4
                
              2018
            </div>
            <div>
              Reverend Street
            </div>
            <div
              className="order-contents"
            >
              confirmed
            </div>
            <div>
              <span />
            </div>
          </div>
        </AccordionItemTitleWrapper>
        <AccordionItemBodyWrapper
          className="accordion__body"
          hideBodyClassName="accordion__body--hidden"
        >
          <table
            className="table"
          >
            <tbody>
              <tr
                className="p-color tr-height tr-color"
              >
                <th>
                  S/N
                </th>
                <th>
                  Name
                </th>
                <th>
                  Quantity
                </th>
                <th>
                  Price
                </th>
                <th>
                  Total Price
                </th>
                <th>
                  Edit
                </th>
              </tr>
              <tr
                className="p-color tr tr-height"
                key="1"
              >
                <td>
                  1
                </td>
                <td>
                  rice
                </td>
                <td>
                  3
                </td>
                <td>
                  200
                </td>
                <td />
                <td>
                  <span />
                </td>
              </tr>
            </tbody>
          </table>
        </AccordionItemBodyWrapper>
      </AccordionItemWrapper>
    </AccordionWrapper>
    <div
      className="meal-pagination"
    >
      <a
        activePage={1}
        firstPageText="«"
        getPageUrl={[Function]}
        hideFirstLastPages={false}
        innerClass="pagination"
        itemsCountPerPage={6}
        lastPageText="»"
        nextPageText="⟩"
        onChange={[Function]}
        pageRangeDisplayed={4}
        prevPageText="⟨"
        totalItemsCount={NaN}
      />
    </div>
  </div>
</div>
`;

exports[`Test order component of dashboard should change state when component receive new props 4`] = `
Orders {
  "confirmStatus": [Function],
  "context": Object {},
  "handleClick": [Function],
  "handlePageChange": [Function],
  "modify": [Function],
  "onChange": [Function],
  "onCloseModal": [Function],
  "onOpenModal": [Function],
  "props": Object {
    "actions": Object {
      "clearMessages": [MockFunction],
      "getUser": [MockFunction],
    },
    "activePage": 1,
    "cart": Object {
      "cart": [MockFunction],
    },
    "errorMessage": Object {
      "createMealError": "",
    },
    "handleMealPageChange": [MockFunction],
    "mealActions": Object {
      "createMeal": [MockFunction],
      "getAllMeals": [MockFunction],
    },
    "meals": Array [],
    "menu": Object {
      "count": 3,
      "rows": Array [],
    },
    "menuActions": Object {
      "getMenu": [MockFunction],
    },
    "menuMeals": Object {
      "count": 0,
      "meals": Array [],
    },
    "mostOrder": Array [
      Object {
        "Meal": Object {
          "descrption": "",
          "id": 1,
          "name": "",
          "price": "",
        },
        "id": "",
      },
    ],
    "myOrder": Object {
      "orders": Array [
        Object {
          "address": "Reverend Street",
          "createdAt": "2018-05-4",
          "id": 1,
          "meals": Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "orderMealItems": Object {
                "quantity": 3,
                "totalPrice": 4,
              },
              "price": "200",
            },
          ],
          "quantity": 3,
          "status": "confirmed",
          "updatedAt": "2018-05-4",
        },
      ],
    },
    "notifics": Array [
      Object {},
    ],
    "orderActions": Object {
      "getMyOrder": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "orderMeal": [MockFunction],
      "updateOrder": [MockFunction],
    },
    "successMessage": Object {
      "createMealSuccess": "",
    },
    "user": Object {},
  },
  "refs": Object {},
  "state": Object {
    "activePage": 1,
    "address": "",
    "confirmButton": "Confirm",
    "confirmOrderModal": false,
    "mealName": "",
    "modifyError": "",
    "modifyOrder": "Modify",
    "open": false,
    "orderId": "",
    "price": "",
    "quantity": "",
    "statusModal": "modal",
    "totalPrice": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <Orders
        actions={
          Object {
            "clearMessages": [MockFunction],
            "getUser": [MockFunction],
          }
        }
        activePage={1}
        cart={
          Object {
            "cart": [MockFunction],
          }
        }
        errorMessage={
          Object {
            "createMealError": "",
          }
        }
        handleMealPageChange={[MockFunction]}
        mealActions={
          Object {
            "createMeal": [MockFunction],
            "getAllMeals": [MockFunction],
          }
        }
        meals={Array []}
        menu={
          Object {
            "count": 3,
            "rows": Array [],
          }
        }
        menuActions={
          Object {
            "getMenu": [MockFunction],
          }
        }
        menuMeals={
          Object {
            "count": 0,
            "meals": Array [],
          }
        }
        mostOrder={
          Array [
            Object {
              "Meal": Object {
                "descrption": "",
                "id": 1,
                "name": "",
                "price": "",
              },
              "id": "",
            },
          ]
        }
        myOrder={
          Object {
            "orders": Array [
              Object {
                "address": "Reverend Street",
                "createdAt": "2018-05-4",
                "id": 1,
                "meals": Array [
                  Object {
                    "descrption": "Very delicious",
                    "id": 1,
                    "name": "rice",
                    "orderMealItems": Object {
                      "quantity": 3,
                      "totalPrice": 4,
                    },
                    "price": "200",
                  },
                ],
                "quantity": 3,
                "status": "confirmed",
                "updatedAt": "2018-05-4",
              },
            ],
          }
        }
        notifics={
          Array [
            Object {},
          ]
        }
        orderActions={
          Object {
            "getMyOrder": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "orderMeal": [MockFunction],
            "updateOrder": [MockFunction],
          }
        }
        successMessage={
          Object {
            "createMealSuccess": "",
          }
        }
        user={Object {}}
      />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": null,
      "_rendered": <div
        className="order-wrapper order-container"
      >
        <div
          style={
            Object {
              "margin": "1rem 1rem 1rem 1rem",
            }
          }
        >
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <orderModal
              modify={[Function]}
              onChange={[Function]}
              state={
                Object {
                  "activePage": 1,
                  "address": "",
                  "confirmButton": "Confirm",
                  "confirmOrderModal": false,
                  "mealName": "",
                  "modifyError": "",
                  "modifyOrder": "Modify",
                  "open": false,
                  "orderId": "",
                  "price": "",
                  "quantity": "",
                  "statusModal": "modal",
                  "totalPrice": "",
                }
              }
            />
          </Modal>
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <br />
            <div
              className="modal-header"
            >
              <p
                className="justify l-r-pad-text"
              >
                 Confirm that you have received this order
              </p>
            </div>
            <div
              className="modal-contents"
            >
              <button
                className="remove-modal confirmStatus"
                onClick={[Function]}
                style={
                  Object {
                    "float": "left",
                    "minHeight": "2rem",
                  }
                }
              >
                Confirm
              </button>
            </div>
          </Modal>
          <h2
            style={
              Object {
                "marginTop": "4rem",
              }
            }
          >
            MY MEAL ORDER HISTORY
          </h2>
          <h3
            className="danger text-center"
          >
            <b />
          </h3>
          <AccordionWrapper
            accordion={true}
            className="accordion"
            onChange={[Function]}
          >
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__meal"
                />
                <div
                  className="order-accordion accordion-color"
                >
                  <div>
                     S/N 
                  </div>
                  <div>
                    Total price
                  </div>
                  <div>
                    Date
                  </div>
                  <div>
                    Address
                  </div>
                  <div>
                    Status
                  </div>
                  <div>
                    Action
                  </div>
                </div>
              </AccordionItemTitleWrapper>
            </AccordionItemWrapper>
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__arrow u-postion-relative"
                />
                <div
                  className="order-accordion"
                >
                  <div
                    className="order-"
                  >
                    1
                  </div>
                  <div
                    className="order-contents "
                  >
                    # 
                  </div>
                  <div
                    className="order-contents "
                  >
                    May
                     
                    4
                      
                    2018
                  </div>
                  <div>
                    Reverend Street
                  </div>
                  <div
                    className="order-contents"
                  >
                    confirmed
                  </div>
                  <div>
                    <span />
                  </div>
                </div>
              </AccordionItemTitleWrapper>
              <AccordionItemBodyWrapper
                className="accordion__body"
                hideBodyClassName="accordion__body--hidden"
              >
                <table
                  className="table"
                >
                  <tbody>
                    <tr
                      className="p-color tr-height tr-color"
                    >
                      <th>
                        S/N
                      </th>
                      <th>
                        Name
                      </th>
                      <th>
                        Quantity
                      </th>
                      <th>
                        Price
                      </th>
                      <th>
                        Total Price
                      </th>
                      <th>
                        Edit
                      </th>
                    </tr>
                    <tr
                      className="p-color tr tr-height"
                    >
                      <td>
                        1
                      </td>
                      <td>
                        rice
                      </td>
                      <td>
                        3
                      </td>
                      <td>
                        200
                      </td>
                      <td />
                      <td>
                        <span />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </AccordionItemBodyWrapper>
            </AccordionItemWrapper>
          </AccordionWrapper>
          <div
            className="meal-pagination"
          >
            <a
              activePage={1}
              firstPageText="«"
              getPageUrl={[Function]}
              hideFirstLastPages={false}
              innerClass="pagination"
              itemsCountPerPage={6}
              lastPageText="»"
              nextPageText="⟩"
              onChange={[Function]}
              pageRangeDisplayed={4}
              prevPageText="⟨"
              totalItemsCount={NaN}
            />
          </div>
        </div>
      </div>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;

exports[`Test order component of dashboard should change state when component receive new props 5`] = `
Orders {
  "confirmStatus": [Function],
  "context": Object {},
  "handleClick": [Function],
  "handlePageChange": [Function],
  "modify": [Function],
  "onChange": [Function],
  "onCloseModal": [Function],
  "onOpenModal": [Function],
  "props": Object {
    "actions": Object {
      "clearMessages": [MockFunction],
      "getUser": [MockFunction],
    },
    "activePage": 1,
    "cart": Object {
      "cart": [MockFunction],
    },
    "errorMessage": Object {
      "createMealError": "",
    },
    "handleMealPageChange": [MockFunction],
    "mealActions": Object {
      "createMeal": [MockFunction],
      "getAllMeals": [MockFunction],
    },
    "meals": Array [],
    "menu": Object {
      "count": 3,
      "rows": Array [],
    },
    "menuActions": Object {
      "getMenu": [MockFunction],
    },
    "menuMeals": Object {
      "count": 0,
      "meals": Array [],
    },
    "mostOrder": Array [
      Object {
        "Meal": Object {
          "descrption": "",
          "id": 1,
          "name": "",
          "price": "",
        },
        "id": "",
      },
    ],
    "myOrder": Object {
      "orders": Array [
        Object {
          "address": "Reverend Street",
          "createdAt": "2018-05-4",
          "id": 1,
          "meals": Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "orderMealItems": Object {
                "quantity": 3,
                "totalPrice": 4,
              },
              "price": "200",
            },
          ],
          "quantity": 3,
          "status": "confirmed",
          "updatedAt": "2018-05-4",
        },
      ],
    },
    "notifics": Array [
      Object {},
    ],
    "orderActions": Object {
      "getMyOrder": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "orderMeal": [MockFunction],
      "updateOrder": [MockFunction],
    },
    "successMessage": Object {
      "createMealSuccess": "",
    },
    "user": Object {},
  },
  "refs": Object {},
  "state": Object {
    "activePage": 1,
    "address": "",
    "confirmButton": "Confirm",
    "confirmOrderModal": false,
    "mealName": "",
    "modifyError": "",
    "modifyOrder": "Modify",
    "open": false,
    "orderId": "",
    "price": "",
    "quantity": "",
    "statusModal": "modal",
    "totalPrice": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <Orders
        actions={
          Object {
            "clearMessages": [MockFunction],
            "getUser": [MockFunction],
          }
        }
        activePage={1}
        cart={
          Object {
            "cart": [MockFunction],
          }
        }
        errorMessage={
          Object {
            "createMealError": "",
          }
        }
        handleMealPageChange={[MockFunction]}
        mealActions={
          Object {
            "createMeal": [MockFunction],
            "getAllMeals": [MockFunction],
          }
        }
        meals={Array []}
        menu={
          Object {
            "count": 3,
            "rows": Array [],
          }
        }
        menuActions={
          Object {
            "getMenu": [MockFunction],
          }
        }
        menuMeals={
          Object {
            "count": 0,
            "meals": Array [],
          }
        }
        mostOrder={
          Array [
            Object {
              "Meal": Object {
                "descrption": "",
                "id": 1,
                "name": "",
                "price": "",
              },
              "id": "",
            },
          ]
        }
        myOrder={
          Object {
            "orders": Array [
              Object {
                "address": "Reverend Street",
                "createdAt": "2018-05-4",
                "id": 1,
                "meals": Array [
                  Object {
                    "descrption": "Very delicious",
                    "id": 1,
                    "name": "rice",
                    "orderMealItems": Object {
                      "quantity": 3,
                      "totalPrice": 4,
                    },
                    "price": "200",
                  },
                ],
                "quantity": 3,
                "status": "confirmed",
                "updatedAt": "2018-05-4",
              },
            ],
          }
        }
        notifics={
          Array [
            Object {},
          ]
        }
        orderActions={
          Object {
            "getMyOrder": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "orderMeal": [MockFunction],
            "updateOrder": [MockFunction],
          }
        }
        successMessage={
          Object {
            "createMealSuccess": "",
          }
        }
        user={Object {}}
      />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": null,
      "_rendered": <div
        className="order-wrapper order-container"
      >
        <div
          style={
            Object {
              "margin": "1rem 1rem 1rem 1rem",
            }
          }
        >
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <orderModal
              modify={[Function]}
              onChange={[Function]}
              state={
                Object {
                  "activePage": 1,
                  "address": "",
                  "confirmButton": "Confirm",
                  "confirmOrderModal": false,
                  "mealName": "",
                  "modifyError": "",
                  "modifyOrder": "Modify",
                  "open": false,
                  "orderId": "",
                  "price": "",
                  "quantity": "",
                  "statusModal": "modal",
                  "totalPrice": "",
                }
              }
            />
          </Modal>
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <br />
            <div
              className="modal-header"
            >
              <p
                className="justify l-r-pad-text"
              >
                 Confirm that you have received this order
              </p>
            </div>
            <div
              className="modal-contents"
            >
              <button
                className="remove-modal confirmStatus"
                onClick={[Function]}
                style={
                  Object {
                    "float": "left",
                    "minHeight": "2rem",
                  }
                }
              >
                Confirm
              </button>
            </div>
          </Modal>
          <h2
            style={
              Object {
                "marginTop": "4rem",
              }
            }
          >
            MY MEAL ORDER HISTORY
          </h2>
          <h3
            className="danger text-center"
          >
            <b />
          </h3>
          <AccordionWrapper
            accordion={true}
            className="accordion"
            onChange={[Function]}
          >
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__meal"
                />
                <div
                  className="order-accordion accordion-color"
                >
                  <div>
                     S/N 
                  </div>
                  <div>
                    Total price
                  </div>
                  <div>
                    Date
                  </div>
                  <div>
                    Address
                  </div>
                  <div>
                    Status
                  </div>
                  <div>
                    Action
                  </div>
                </div>
              </AccordionItemTitleWrapper>
            </AccordionItemWrapper>
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__arrow u-postion-relative"
                />
                <div
                  className="order-accordion"
                >
                  <div
                    className="order-"
                  >
                    1
                  </div>
                  <div
                    className="order-contents "
                  >
                    # 
                  </div>
                  <div
                    className="order-contents "
                  >
                    May
                     
                    4
                      
                    2018
                  </div>
                  <div>
                    Reverend Street
                  </div>
                  <div
                    className="order-contents"
                  >
                    confirmed
                  </div>
                  <div>
                    <span />
                  </div>
                </div>
              </AccordionItemTitleWrapper>
              <AccordionItemBodyWrapper
                className="accordion__body"
                hideBodyClassName="accordion__body--hidden"
              >
                <table
                  className="table"
                >
                  <tbody>
                    <tr
                      className="p-color tr-height tr-color"
                    >
                      <th>
                        S/N
                      </th>
                      <th>
                        Name
                      </th>
                      <th>
                        Quantity
                      </th>
                      <th>
                        Price
                      </th>
                      <th>
                        Total Price
                      </th>
                      <th>
                        Edit
                      </th>
                    </tr>
                    <tr
                      className="p-color tr tr-height"
                    >
                      <td>
                        1
                      </td>
                      <td>
                        rice
                      </td>
                      <td>
                        3
                      </td>
                      <td>
                        200
                      </td>
                      <td />
                      <td>
                        <span />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </AccordionItemBodyWrapper>
            </AccordionItemWrapper>
          </AccordionWrapper>
          <div
            className="meal-pagination"
          >
            <a
              activePage={1}
              firstPageText="«"
              getPageUrl={[Function]}
              hideFirstLastPages={false}
              innerClass="pagination"
              itemsCountPerPage={6}
              lastPageText="»"
              nextPageText="⟩"
              onChange={[Function]}
              pageRangeDisplayed={4}
              prevPageText="⟨"
              totalItemsCount={NaN}
            />
          </div>
        </div>
      </div>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;

exports[`Test order component of dashboard should respond to a click event and dislay a modal 1`] = `
<div
  className="order-wrapper order-container"
>
  <div
    style={
      Object {
        "margin": "1rem 1rem 1rem 1rem",
      }
    }
  >
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={false}
      showCloseIcon={true}
      styles={Object {}}
    >
      <orderModal
        modify={[Function]}
        onChange={[Function]}
        state={
          Object {
            "activePage": 1,
            "address": "",
            "confirmButton": "Confirm",
            "confirmOrderModal": true,
            "mealName": undefined,
            "modifyError": "error on update",
            "modifyOrder": "Modify",
            "open": false,
            "orderId": 1,
            "price": "",
            "quantity": "",
            "statusModal": "",
            "totalPrice": "",
          }
        }
      />
    </Modal>
    <Modal
      animationDuration={500}
      center={true}
      classNames={Object {}}
      classes={
        Object {
          "closeButton": "styles_closeButton__20ID4",
          "closeIcon": "styles_closeIcon__1QwbI",
          "modal": "styles_modal__gNwvD",
          "overlay": "styles_overlay__CLSq-",
          "overlayCenter": "styles_overlayCenter__YHoO7",
          "transitionEnter": "styles_transitionEnter__3j_-a",
          "transitionEnterActive": "styles_transitionEnterActive___eQs7",
          "transitionExit": "styles_transitionExit__1KmEf",
          "transitionExitActive": "styles_transitionExitActive__1nQXw",
        }
      }
      closeIconSize={28}
      closeIconSvgPath={
        <path
          d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
        />
      }
      closeOnEsc={true}
      closeOnOverlayClick={true}
      onClose={[Function]}
      onEntered={null}
      onEscKeyDown={null}
      onExited={null}
      onOverlayClick={null}
      open={true}
      showCloseIcon={true}
      styles={Object {}}
    >
      <br />
      <div
        className="modal-header"
      >
        <p
          className="justify l-r-pad-text"
        >
           Confirm that you have received this order
        </p>
      </div>
      <div
        className="modal-contents"
      >
        <button
          className="remove-modal confirmStatus"
          onClick={[Function]}
          style={
            Object {
              "float": "left",
              "minHeight": "2rem",
            }
          }
        >
          Confirm
        </button>
      </div>
    </Modal>
    <h2
      style={
        Object {
          "marginTop": "4rem",
        }
      }
    >
      MY MEAL ORDER HISTORY
    </h2>
    <h3
      className="danger text-center"
    >
      <b />
    </h3>
    <AccordionWrapper
      accordion={true}
      className="accordion"
      onChange={[Function]}
    >
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__meal"
          />
          <div
            className="order-accordion accordion-color"
          >
            <div>
               S/N 
            </div>
            <div>
              Total price
            </div>
            <div>
              Date
            </div>
            <div>
              Address
            </div>
            <div>
              Status
            </div>
            <div>
              Action
            </div>
          </div>
        </AccordionItemTitleWrapper>
      </AccordionItemWrapper>
      <AccordionItemWrapper
        accordionStore={
          AccordionContainer {
            "_listeners": Array [],
            "addItem": [Function],
            "removeItem": [Function],
            "setAccordion": [Function],
            "setExpanded": [Function],
            "setOnChange": [Function],
            "state": Object {
              "accordion": true,
              "items": Array [],
              "onChange": [Function],
            },
          }
        }
        className="accordion__item"
        disabled={false}
        expanded={false}
        hideBodyClassName=""
        key="1"
      >
        <AccordionItemTitleWrapper
          className="accordion__title"
          hideBodyClassName=""
        >
          <div
            className="accordion__arrow u-postion-relative"
          />
          <div
            className="order-accordion"
          >
            <div
              className="order-"
            >
              1
            </div>
            <div
              className="order-contents "
            >
              # 
            </div>
            <div
              className="order-contents "
            >
              May
               
              4
                
              2018
            </div>
            <div>
              Reverend Street
            </div>
            <div
              className="order-contents"
            >
              pending
            </div>
            <div>
              <button
                className="y-color confirm-btn"
                onClick={[Function]}
              >
                Confirm
              </button>
            </div>
          </div>
        </AccordionItemTitleWrapper>
        <AccordionItemBodyWrapper
          className="accordion__body"
          hideBodyClassName="accordion__body--hidden"
        >
          <table
            className="table"
          >
            <tbody>
              <tr
                className="p-color tr-height tr-color"
              >
                <th>
                  S/N
                </th>
                <th>
                  Name
                </th>
                <th>
                  Quantity
                </th>
                <th>
                  Price
                </th>
                <th>
                  Total Price
                </th>
                <th>
                  Edit
                </th>
              </tr>
              <tr
                className="p-color tr tr-height"
                key="1"
              >
                <td>
                  1
                </td>
                <td>
                  rice
                </td>
                <td>
                  3
                </td>
                <td>
                  200
                </td>
                <td />
                <td>
                  <em
                    className="modify-btn fa fa-edit fa-2x"
                    onClick={[Function]}
                    role="button"
                  />
                </td>
              </tr>
            </tbody>
          </table>
        </AccordionItemBodyWrapper>
      </AccordionItemWrapper>
    </AccordionWrapper>
    <div
      className="meal-pagination"
    >
      <a
        activePage={1}
        firstPageText="«"
        getPageUrl={[Function]}
        hideFirstLastPages={false}
        innerClass="pagination"
        itemsCountPerPage={6}
        lastPageText="»"
        nextPageText="⟩"
        onChange={[Function]}
        pageRangeDisplayed={4}
        prevPageText="⟨"
        totalItemsCount={NaN}
      />
    </div>
  </div>
</div>
`;

exports[`Test order component of dashboard should respond to cancelOrder functions 1`] = `
Orders {
  "confirmStatus": [Function],
  "context": Object {},
  "handleClick": [Function],
  "handlePageChange": [Function],
  "modify": [Function],
  "onChange": [Function],
  "onCloseModal": [Function],
  "onOpenModal": [Function],
  "props": Object {
    "actions": Object {
      "clearMessages": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "getNotifications": [MockFunction],
      "getUser": [MockFunction],
      "refreshToken": [MockFunction],
      "updateProfile": [MockFunction],
      "upgrade": [MockFunction],
    },
    "activePage": 1,
    "cart": Object {
      "cart": Array [],
    },
    "cartModal": [MockFunction],
    "confirmOrder": [MockFunction],
    "errorMessage": Object {
      "createMealError": "Wrong credentials",
      "updateError": "error on update",
    },
    "handleMealPageChange": [MockFunction],
    "mealActions": Object {
      "getAllMeals": [MockFunction],
      "loadMostOrderedMeal": [MockFunction],
    },
    "meals": Array [
      Object {
        "descrption": "Very delicious",
        "id": 1,
        "name": "rice",
        "price": "200",
      },
      Object {
        "descrption": "Very delicious",
        "id": 2,
        "name": "beans",
        "price": "200",
      },
    ],
    "menu": Object {
      "count": 4,
      "rows": Array [
        Object {
          "id": 1,
          "meals": Array [
            Object {
              "desctription": "good",
              "id": 1,
              "name": "jollof",
              "price": 100,
            },
          ],
          "user": Object {
            "email": "ken@gmail.com",
            "name": "ken",
            "usrername": "ken",
          },
        },
      ],
    },
    "menuActions": Object {
      "getAllOrders": [MockFunction],
      "getMenu": [MockFunction],
    },
    "menuMeals": Object {
      "count": 2,
      "meals": Object {
        "desctription": "good",
        "id": 1,
        "name": "jollof",
        "price": 100,
      },
    },
    "myOrder": Object {
      "orders": Array [
        Object {
          "address": "Reverend Street",
          "createdAt": "2018-05-4",
          "id": 1,
          "meals": Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "orderMealItems": Object {
                "quantity": 3,
                "totalPrice": 4,
              },
              "price": "200",
            },
          ],
          "quantity": 3,
          "status": "pending",
          "updatedAt": "2018-05-4",
        },
      ],
    },
    "notifics": Array [
      Object {
        "createdAt": "2018-06-10",
        "id": 1,
        "message": "here i come",
        "updatedAt": "2018-06-10",
      },
    ],
    "orderActions": Object {
      "confirmStatus": [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "getMyOrder": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "orderMeal": [MockFunction],
      "updateOrder": [MockFunction],
    },
    "showMenu": [MockFunction],
    "state": Object {
      "accordion": Object {},
    },
    "successMessage": Object {
      "createMealSuccess": "meal created",
      "updateProfileSuccess": "updated",
      "upgradeSuccess": " good",
    },
    "upGrade": [MockFunction],
    "user": Object {
      "email": "ken@gmaoil.com",
      "id": 1,
      "image": "image_url",
      "name": "kenny",
      "username": "ken",
    },
  },
  "refs": Object {},
  "state": Object {
    "activePage": 1,
    "address": "",
    "confirmButton": <div>
      <i
        aria-hidden="true"
        className="fa fa-spinner fa-spin fa-2x fa-fw"
      />
    </div>,
    "confirmOrderModal": false,
    "mealName": "",
    "modifyError": "error on update",
    "modifyOrder": "Modify",
    "open": false,
    "orderId": "",
    "price": "",
    "quantity": "",
    "statusModal": "modal",
    "totalPrice": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <Orders
        actions={
          Object {
            "clearMessages": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "getNotifications": [MockFunction],
            "getUser": [MockFunction],
            "refreshToken": [MockFunction],
            "updateProfile": [MockFunction],
            "upgrade": [MockFunction],
          }
        }
        activePage={1}
        cart={
          Object {
            "cart": Array [],
          }
        }
        cartModal={[MockFunction]}
        confirmOrder={[MockFunction]}
        errorMessage={
          Object {
            "createMealError": "Wrong credentials",
            "updateError": "error on update",
          }
        }
        handleMealPageChange={[MockFunction]}
        mealActions={
          Object {
            "getAllMeals": [MockFunction],
            "loadMostOrderedMeal": [MockFunction],
          }
        }
        meals={
          Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "price": "200",
            },
            Object {
              "descrption": "Very delicious",
              "id": 2,
              "name": "beans",
              "price": "200",
            },
          ]
        }
        menu={
          Object {
            "count": 4,
            "rows": Array [
              Object {
                "id": 1,
                "meals": Array [
                  Object {
                    "desctription": "good",
                    "id": 1,
                    "name": "jollof",
                    "price": 100,
                  },
                ],
                "user": Object {
                  "email": "ken@gmail.com",
                  "name": "ken",
                  "usrername": "ken",
                },
              },
            ],
          }
        }
        menuActions={
          Object {
            "getAllOrders": [MockFunction],
            "getMenu": [MockFunction],
          }
        }
        menuMeals={
          Object {
            "count": 2,
            "meals": Object {
              "desctription": "good",
              "id": 1,
              "name": "jollof",
              "price": 100,
            },
          }
        }
        myOrder={
          Object {
            "orders": Array [
              Object {
                "address": "Reverend Street",
                "createdAt": "2018-05-4",
                "id": 1,
                "meals": Array [
                  Object {
                    "descrption": "Very delicious",
                    "id": 1,
                    "name": "rice",
                    "orderMealItems": Object {
                      "quantity": 3,
                      "totalPrice": 4,
                    },
                    "price": "200",
                  },
                ],
                "quantity": 3,
                "status": "pending",
                "updatedAt": "2018-05-4",
              },
            ],
          }
        }
        notifics={
          Array [
            Object {
              "createdAt": "2018-06-10",
              "id": 1,
              "message": "here i come",
              "updatedAt": "2018-06-10",
            },
          ]
        }
        orderActions={
          Object {
            "confirmStatus": [MockFunction] {
              "calls": Array [
                Array [
                  "",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "getMyOrder": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "orderMeal": [MockFunction],
            "updateOrder": [MockFunction],
          }
        }
        showMenu={[MockFunction]}
        state={
          Object {
            "accordion": Object {},
          }
        }
        successMessage={
          Object {
            "createMealSuccess": "meal created",
            "updateProfileSuccess": "updated",
            "upgradeSuccess": " good",
          }
        }
        upGrade={[MockFunction]}
        user={
          Object {
            "email": "ken@gmaoil.com",
            "id": 1,
            "image": "image_url",
            "name": "kenny",
            "username": "ken",
          }
        }
      />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": Object {
        "activePage": 1,
        "address": "",
        "confirmButton": <div>
          <i
            aria-hidden="true"
            className="fa fa-spinner fa-spin fa-2x fa-fw"
          />
        </div>,
        "confirmOrderModal": false,
        "mealName": "",
        "modifyError": "error on update",
        "modifyOrder": "Modify",
        "open": false,
        "orderId": "",
        "price": "",
        "quantity": "",
        "statusModal": "modal",
        "totalPrice": "",
      },
      "_rendered": <div
        className="order-wrapper order-container"
      >
        <div
          style={
            Object {
              "margin": "1rem 1rem 1rem 1rem",
            }
          }
        >
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <orderModal
              modify={[Function]}
              onChange={[Function]}
              state={
                Object {
                  "activePage": 1,
                  "address": "",
                  "confirmButton": <div>
                    <i
                      aria-hidden="true"
                      className="fa fa-spinner fa-spin fa-2x fa-fw"
                    />
                  </div>,
                  "confirmOrderModal": false,
                  "mealName": "",
                  "modifyError": "error on update",
                  "modifyOrder": "Modify",
                  "open": false,
                  "orderId": "",
                  "price": "",
                  "quantity": "",
                  "statusModal": "modal",
                  "totalPrice": "",
                }
              }
            />
          </Modal>
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <br />
            <div
              className="modal-header"
            >
              <p
                className="justify l-r-pad-text"
              >
                 Confirm that you have received this order
              </p>
            </div>
            <div
              className="modal-contents"
            >
              <button
                className="remove-modal confirmStatus"
                onClick={[Function]}
                style={
                  Object {
                    "float": "left",
                    "minHeight": "2rem",
                  }
                }
              >
                <div>
                  <i
                    aria-hidden="true"
                    className="fa fa-spinner fa-spin fa-2x fa-fw"
                  />
                </div>
              </button>
            </div>
          </Modal>
          <h2
            style={
              Object {
                "marginTop": "4rem",
              }
            }
          >
            MY MEAL ORDER HISTORY
          </h2>
          <h3
            className="danger text-center"
          >
            <b />
          </h3>
          <AccordionWrapper
            accordion={true}
            className="accordion"
            onChange={[Function]}
          >
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__meal"
                />
                <div
                  className="order-accordion accordion-color"
                >
                  <div>
                     S/N 
                  </div>
                  <div>
                    Total price
                  </div>
                  <div>
                    Date
                  </div>
                  <div>
                    Address
                  </div>
                  <div>
                    Status
                  </div>
                  <div>
                    Action
                  </div>
                </div>
              </AccordionItemTitleWrapper>
            </AccordionItemWrapper>
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__arrow u-postion-relative"
                />
                <div
                  className="order-accordion"
                >
                  <div
                    className="order-"
                  >
                    1
                  </div>
                  <div
                    className="order-contents "
                  >
                    # 
                  </div>
                  <div
                    className="order-contents "
                  >
                    May
                     
                    4
                      
                    2018
                  </div>
                  <div>
                    Reverend Street
                  </div>
                  <div
                    className="order-contents"
                  >
                    pending
                  </div>
                  <div>
                    <button
                      className="y-color confirm-btn"
                      onClick={[Function]}
                    >
                      Confirm
                    </button>
                  </div>
                </div>
              </AccordionItemTitleWrapper>
              <AccordionItemBodyWrapper
                className="accordion__body"
                hideBodyClassName="accordion__body--hidden"
              >
                <table
                  className="table"
                >
                  <tbody>
                    <tr
                      className="p-color tr-height tr-color"
                    >
                      <th>
                        S/N
                      </th>
                      <th>
                        Name
                      </th>
                      <th>
                        Quantity
                      </th>
                      <th>
                        Price
                      </th>
                      <th>
                        Total Price
                      </th>
                      <th>
                        Edit
                      </th>
                    </tr>
                    <tr
                      className="p-color tr tr-height"
                    >
                      <td>
                        1
                      </td>
                      <td>
                        rice
                      </td>
                      <td>
                        3
                      </td>
                      <td>
                        200
                      </td>
                      <td />
                      <td>
                        <em
                          className="modify-btn fa fa-edit fa-2x"
                          onClick={[Function]}
                          role="button"
                        />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </AccordionItemBodyWrapper>
            </AccordionItemWrapper>
          </AccordionWrapper>
          <div
            className="meal-pagination"
          >
            <a
              activePage={1}
              firstPageText="«"
              getPageUrl={[Function]}
              hideFirstLastPages={false}
              innerClass="pagination"
              itemsCountPerPage={6}
              lastPageText="»"
              nextPageText="⟩"
              onChange={[Function]}
              pageRangeDisplayed={4}
              prevPageText="⟨"
              totalItemsCount={NaN}
            />
          </div>
        </div>
      </div>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;

exports[`Test order component of dashboard should respond to mapDispatchToProps methods 1`] = `
Object {
  "actions": Object {
    "changePassword": [Function],
    "clearMessages": [Function],
    "getNotifications": [Function],
    "getUser": [Function],
    "loadErrorMessage": [Function],
    "loadNotifications": [Function],
    "loadSuccessMessage": [Function],
    "loadUser": [Function],
    "login": [Function],
    "refreshToken": [Function],
    "register": [Function],
    "resetLink": [Function],
    "updateProfile": [Function],
    "upgrade": [Function],
  },
  "orderActions": Object {
    "confirmStatus": [Function],
    "getAllOrders": [Function],
    "getMyOrder": [Function],
    "loadAllOrder": [Function],
    "loadErrorMessage": [Function],
    "loadMostOrdered": [Function],
    "loadMyOrder": [Function],
    "loadSuccessMessage": [Function],
    "loadTodayMenu": [Function],
    "orderMeal": [Function],
    "updateOrder": [Function],
  },
}
`;

exports[`Test order component of dashboard should respond to mapStateToProps methods 1`] = `
Object {
  "errorMessage": Object {
    "createMealError": "Wrong credentials",
    "updateError": "error on update",
  },
  "myOrder": Object {
    "orders": Array [
      Object {
        "address": "Reverend Street",
        "createdAt": "2018-05-4",
        "id": 1,
        "meals": Array [
          Object {
            "descrption": "Very delicious",
            "id": 1,
            "name": "rice",
            "orderMealItems": Object {
              "quantity": 3,
              "totalPrice": 4,
            },
            "price": "200",
          },
        ],
        "quantity": 3,
        "status": "pending",
        "updatedAt": "2018-05-4",
      },
    ],
  },
  "successMessage": Object {
    "createMealSuccess": "meal created",
    "updateProfileSuccess": "updated",
    "upgradeSuccess": " good",
  },
}
`;

exports[`Test order component of dashboard should respond to modify functions 1`] = `
Orders {
  "confirmStatus": [Function],
  "context": Object {},
  "handleClick": [Function],
  "handlePageChange": [Function],
  "modify": [Function],
  "onChange": [Function],
  "onCloseModal": [Function],
  "onOpenModal": [Function],
  "props": Object {
    "actions": Object {
      "clearMessages": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "getNotifications": [MockFunction],
      "getUser": [MockFunction],
      "refreshToken": [MockFunction],
      "updateProfile": [MockFunction],
      "upgrade": [MockFunction],
    },
    "activePage": 1,
    "cart": Object {
      "cart": Array [],
    },
    "cartModal": [MockFunction],
    "confirmOrder": [MockFunction],
    "errorMessage": Object {
      "createMealError": "Wrong credentials",
      "updateError": "error on update",
    },
    "handleMealPageChange": [MockFunction],
    "mealActions": Object {
      "getAllMeals": [MockFunction],
      "loadMostOrderedMeal": [MockFunction],
    },
    "meals": Array [
      Object {
        "descrption": "Very delicious",
        "id": 1,
        "name": "rice",
        "price": "200",
      },
      Object {
        "descrption": "Very delicious",
        "id": 2,
        "name": "beans",
        "price": "200",
      },
    ],
    "menu": Object {
      "count": 4,
      "rows": Array [
        Object {
          "id": 1,
          "meals": Array [
            Object {
              "desctription": "good",
              "id": 1,
              "name": "jollof",
              "price": 100,
            },
          ],
          "user": Object {
            "email": "ken@gmail.com",
            "name": "ken",
            "usrername": "ken",
          },
        },
      ],
    },
    "menuActions": Object {
      "getAllOrders": [MockFunction],
      "getMenu": [MockFunction],
    },
    "menuMeals": Object {
      "count": 2,
      "meals": Object {
        "desctription": "good",
        "id": 1,
        "name": "jollof",
        "price": 100,
      },
    },
    "myOrder": Object {
      "orders": Array [
        Object {
          "address": "Reverend Street",
          "createdAt": "2018-05-4",
          "id": 1,
          "meals": Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "orderMealItems": Object {
                "quantity": 3,
                "totalPrice": 4,
              },
              "price": "200",
            },
          ],
          "quantity": 3,
          "status": "pending",
          "updatedAt": "2018-05-4",
        },
      ],
    },
    "notifics": Array [
      Object {
        "createdAt": "2018-06-10",
        "id": 1,
        "message": "here i come",
        "updatedAt": "2018-06-10",
      },
    ],
    "orderActions": Object {
      "confirmStatus": [MockFunction],
      "getMyOrder": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      },
      "orderMeal": [MockFunction],
      "updateOrder": [MockFunction],
    },
    "showMenu": [MockFunction],
    "state": Object {
      "accordion": Object {},
    },
    "successMessage": Object {
      "createMealSuccess": "meal created",
      "updateProfileSuccess": "updated",
      "upgradeSuccess": " good",
    },
    "upGrade": [MockFunction],
    "user": Object {
      "email": "ken@gmaoil.com",
      "id": 1,
      "image": "image_url",
      "name": "kenny",
      "username": "ken",
    },
  },
  "refs": Object {},
  "state": Object {
    "activePage": 1,
    "address": "",
    "confirmButton": "Confirm",
    "confirmOrderModal": false,
    "mealName": "",
    "modifyError": "error on update",
    "modifyOrder": "Modify",
    "open": false,
    "orderId": "",
    "price": "",
    "quantity": "",
    "statusModal": "modal",
    "totalPrice": "",
  },
  "updater": Updater {
    "_callbacks": Array [],
    "_renderer": ReactShallowRenderer {
      "_context": Object {},
      "_element": <Orders
        actions={
          Object {
            "clearMessages": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "getNotifications": [MockFunction],
            "getUser": [MockFunction],
            "refreshToken": [MockFunction],
            "updateProfile": [MockFunction],
            "upgrade": [MockFunction],
          }
        }
        activePage={1}
        cart={
          Object {
            "cart": Array [],
          }
        }
        cartModal={[MockFunction]}
        confirmOrder={[MockFunction]}
        errorMessage={
          Object {
            "createMealError": "Wrong credentials",
            "updateError": "error on update",
          }
        }
        handleMealPageChange={[MockFunction]}
        mealActions={
          Object {
            "getAllMeals": [MockFunction],
            "loadMostOrderedMeal": [MockFunction],
          }
        }
        meals={
          Array [
            Object {
              "descrption": "Very delicious",
              "id": 1,
              "name": "rice",
              "price": "200",
            },
            Object {
              "descrption": "Very delicious",
              "id": 2,
              "name": "beans",
              "price": "200",
            },
          ]
        }
        menu={
          Object {
            "count": 4,
            "rows": Array [
              Object {
                "id": 1,
                "meals": Array [
                  Object {
                    "desctription": "good",
                    "id": 1,
                    "name": "jollof",
                    "price": 100,
                  },
                ],
                "user": Object {
                  "email": "ken@gmail.com",
                  "name": "ken",
                  "usrername": "ken",
                },
              },
            ],
          }
        }
        menuActions={
          Object {
            "getAllOrders": [MockFunction],
            "getMenu": [MockFunction],
          }
        }
        menuMeals={
          Object {
            "count": 2,
            "meals": Object {
              "desctription": "good",
              "id": 1,
              "name": "jollof",
              "price": 100,
            },
          }
        }
        myOrder={
          Object {
            "orders": Array [
              Object {
                "address": "Reverend Street",
                "createdAt": "2018-05-4",
                "id": 1,
                "meals": Array [
                  Object {
                    "descrption": "Very delicious",
                    "id": 1,
                    "name": "rice",
                    "orderMealItems": Object {
                      "quantity": 3,
                      "totalPrice": 4,
                    },
                    "price": "200",
                  },
                ],
                "quantity": 3,
                "status": "pending",
                "updatedAt": "2018-05-4",
              },
            ],
          }
        }
        notifics={
          Array [
            Object {
              "createdAt": "2018-06-10",
              "id": 1,
              "message": "here i come",
              "updatedAt": "2018-06-10",
            },
          ]
        }
        orderActions={
          Object {
            "confirmStatus": [MockFunction],
            "getMyOrder": [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
            "orderMeal": [MockFunction],
            "updateOrder": [MockFunction],
          }
        }
        showMenu={[MockFunction]}
        state={
          Object {
            "accordion": Object {},
          }
        }
        successMessage={
          Object {
            "createMealSuccess": "meal created",
            "updateProfileSuccess": "updated",
            "upgradeSuccess": " good",
          }
        }
        upGrade={[MockFunction]}
        user={
          Object {
            "email": "ken@gmaoil.com",
            "id": 1,
            "image": "image_url",
            "name": "kenny",
            "username": "ken",
          }
        }
      />,
      "_forcedUpdate": false,
      "_instance": [Circular],
      "_newState": Object {
        "activePage": 1,
        "address": "",
        "confirmButton": "Confirm",
        "confirmOrderModal": false,
        "mealName": "",
        "modifyError": "error on update",
        "modifyOrder": "Modify",
        "open": false,
        "orderId": "",
        "price": "",
        "quantity": "",
        "statusModal": "modal",
        "totalPrice": "",
      },
      "_rendered": <div
        className="order-wrapper order-container"
      >
        <div
          style={
            Object {
              "margin": "1rem 1rem 1rem 1rem",
            }
          }
        >
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <orderModal
              modify={[Function]}
              onChange={[Function]}
              state={
                Object {
                  "activePage": 1,
                  "address": "",
                  "confirmButton": "Confirm",
                  "confirmOrderModal": false,
                  "mealName": "",
                  "modifyError": "error on update",
                  "modifyOrder": "Modify",
                  "open": false,
                  "orderId": "",
                  "price": "",
                  "quantity": "",
                  "statusModal": "modal",
                  "totalPrice": "",
                }
              }
            />
          </Modal>
          <Modal
            animationDuration={500}
            center={true}
            classNames={Object {}}
            classes={
              Object {
                "closeButton": "styles_closeButton__20ID4",
                "closeIcon": "styles_closeIcon__1QwbI",
                "modal": "styles_modal__gNwvD",
                "overlay": "styles_overlay__CLSq-",
                "overlayCenter": "styles_overlayCenter__YHoO7",
                "transitionEnter": "styles_transitionEnter__3j_-a",
                "transitionEnterActive": "styles_transitionEnterActive___eQs7",
                "transitionExit": "styles_transitionExit__1KmEf",
                "transitionExitActive": "styles_transitionExitActive__1nQXw",
              }
            }
            closeIconSize={28}
            closeIconSvgPath={
              <path
                d="M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z"
              />
            }
            closeOnEsc={true}
            closeOnOverlayClick={true}
            onClose={[Function]}
            onEntered={null}
            onEscKeyDown={null}
            onExited={null}
            onOverlayClick={null}
            open={false}
            showCloseIcon={true}
            styles={Object {}}
          >
            <br />
            <div
              className="modal-header"
            >
              <p
                className="justify l-r-pad-text"
              >
                 Confirm that you have received this order
              </p>
            </div>
            <div
              className="modal-contents"
            >
              <button
                className="remove-modal confirmStatus"
                onClick={[Function]}
                style={
                  Object {
                    "float": "left",
                    "minHeight": "2rem",
                  }
                }
              >
                Confirm
              </button>
            </div>
          </Modal>
          <h2
            style={
              Object {
                "marginTop": "4rem",
              }
            }
          >
            MY MEAL ORDER HISTORY
          </h2>
          <h3
            className="danger text-center"
          >
            <b />
          </h3>
          <AccordionWrapper
            accordion={true}
            className="accordion"
            onChange={[Function]}
          >
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__meal"
                />
                <div
                  className="order-accordion accordion-color"
                >
                  <div>
                     S/N 
                  </div>
                  <div>
                    Total price
                  </div>
                  <div>
                    Date
                  </div>
                  <div>
                    Address
                  </div>
                  <div>
                    Status
                  </div>
                  <div>
                    Action
                  </div>
                </div>
              </AccordionItemTitleWrapper>
            </AccordionItemWrapper>
            <AccordionItemWrapper
              accordionStore={
                AccordionContainer {
                  "_listeners": Array [],
                  "addItem": [Function],
                  "removeItem": [Function],
                  "setAccordion": [Function],
                  "setExpanded": [Function],
                  "setOnChange": [Function],
                  "state": Object {
                    "accordion": true,
                    "items": Array [],
                    "onChange": [Function],
                  },
                }
              }
              className="accordion__item"
              disabled={false}
              expanded={false}
              hideBodyClassName=""
            >
              <AccordionItemTitleWrapper
                className="accordion__title"
                hideBodyClassName=""
              >
                <div
                  className="accordion__arrow u-postion-relative"
                />
                <div
                  className="order-accordion"
                >
                  <div
                    className="order-"
                  >
                    1
                  </div>
                  <div
                    className="order-contents "
                  >
                    # 
                  </div>
                  <div
                    className="order-contents "
                  >
                    May
                     
                    4
                      
                    2018
                  </div>
                  <div>
                    Reverend Street
                  </div>
                  <div
                    className="order-contents"
                  >
                    pending
                  </div>
                  <div>
                    <button
                      className="y-color confirm-btn"
                      onClick={[Function]}
                    >
                      Confirm
                    </button>
                  </div>
                </div>
              </AccordionItemTitleWrapper>
              <AccordionItemBodyWrapper
                className="accordion__body"
                hideBodyClassName="accordion__body--hidden"
              >
                <table
                  className="table"
                >
                  <tbody>
                    <tr
                      className="p-color tr-height tr-color"
                    >
                      <th>
                        S/N
                      </th>
                      <th>
                        Name
                      </th>
                      <th>
                        Quantity
                      </th>
                      <th>
                        Price
                      </th>
                      <th>
                        Total Price
                      </th>
                      <th>
                        Edit
                      </th>
                    </tr>
                    <tr
                      className="p-color tr tr-height"
                    >
                      <td>
                        1
                      </td>
                      <td>
                        rice
                      </td>
                      <td>
                        3
                      </td>
                      <td>
                        200
                      </td>
                      <td />
                      <td>
                        <em
                          className="modify-btn fa fa-edit fa-2x"
                          onClick={[Function]}
                          role="button"
                        />
                      </td>
                    </tr>
                  </tbody>
                </table>
              </AccordionItemBodyWrapper>
            </AccordionItemWrapper>
          </AccordionWrapper>
          <div
            className="meal-pagination"
          >
            <a
              activePage={1}
              firstPageText="«"
              getPageUrl={[Function]}
              hideFirstLastPages={false}
              innerClass="pagination"
              itemsCountPerPage={6}
              lastPageText="»"
              nextPageText="⟩"
              onChange={[Function]}
              pageRangeDisplayed={4}
              prevPageText="⟨"
              totalItemsCount={NaN}
            />
          </div>
        </div>
      </div>,
      "_rendering": false,
      "_updater": [Circular],
    },
  },
}
`;
